{
  "tutorials/GenerateSql/object2sql.html": {
    "href": "tutorials/GenerateSql/object2sql.html",
    "title": "SAMPLE ARTICLE | DotNetHelper.Serialization.Json",
    "keywords": "SAMPLE ARTICLE"
  },
  "tutorials/index.html": {
    "href": "tutorials/index.html",
    "title": "THIS IS THE HOME PAGE TO TUTORIALS | DotNetHelper.Serialization.Json",
    "keywords": "THIS IS THE HOME PAGE TO TUTORIALS"
  },
  "tutorials/GenerateSql/datatable2sql.html": {
    "href": "tutorials/GenerateSql/datatable2sql.html",
    "title": "SAMPLE ARTICLE | DotNetHelper.Serialization.Json",
    "keywords": "SAMPLE ARTICLE"
  },
  "tutorials/Attributes/attribute.html": {
    "href": "tutorials/Attributes/attribute.html",
    "title": "Custom Attributes | DotNetHelper.Serialization.Json",
    "keywords": "Custom Attributes In the secnarios where you need to build Update,Delete, or Upsert Statements. Attributes are use to generate the where clause. This library has its own custom attributes and can also work with the common DataAnnotation attributes. With the support of DataAnnotation this means this library could be paired with your favorite orm like Dapper or Enitity Framework Mark a property as an identity fields. [SqlColumn(SetIsIdentityKey = true)] OR [DatabaseGenerated(DatabaseGeneratedOption.Identity)] Mark a property as a key field. [SqlColumn(SetIsIdentityKey = true)] OR [DatabaseGenerated(DatabaseGeneratedOption.Identity)] <!-- #### Storing Columns As CSV, XML, & JSON ```csharp [SqlColumn(SerializableType = SerializableType.Json)] or [SqlColumn(SerializableType = SerializableType.Xml)] or [SqlColumn(SerializableType = SerializableType.Csv)] ``` -->"
  },
  "api/DotNetHelper.Serialization.Json.DataSourceJson.html": {
    "href": "api/DotNetHelper.Serialization.Json.DataSourceJson.html",
    "title": "Class DataSourceJson | DotNetHelper.Serialization.Json",
    "keywords": "Class DataSourceJson Inheritance Object DataSourceJson Implements DotNetHelper.Serialization.Abstractions.Interface.ISerializer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.Serialization.Json Assembly : DotNetHelper.Serialization.Json.dll Syntax public class DataSourceJson : ISerializer Constructors | Improve this Doc View Source DataSourceJson() Declaration public DataSourceJson() | Improve this Doc View Source DataSourceJson(JsonSerializerSettings) Declaration public DataSourceJson(JsonSerializerSettings settings) Parameters Type Name Description Newtonsoft.Json.JsonSerializerSettings settings | Improve this Doc View Source DataSourceJson(Encoding, JsonSerializerSettings) Declaration public DataSourceJson(Encoding encoding, JsonSerializerSettings settings = null) Parameters Type Name Description Encoding encoding Newtonsoft.Json.JsonSerializerSettings settings Properties | Improve this Doc View Source Encoding Declaration public Encoding Encoding { get; set; } Property Value Type Description Encoding | Improve this Doc View Source Settings Declaration public JsonSerializerSettings Settings { get; set; } Property Value Type Description Newtonsoft.Json.JsonSerializerSettings Methods | Improve this Doc View Source Deserialize(Stream, Int32, Boolean) Declaration public dynamic Deserialize(Stream stream, int bufferSize = 1024, bool leaveStreamOpen = false) Parameters Type Name Description Stream stream Int32 bufferSize Boolean leaveStreamOpen Returns Type Description Object | Improve this Doc View Source Deserialize(Stream, Type, Int32, Boolean) Declaration public object Deserialize(Stream stream, Type type, int bufferSize = 1024, bool leaveStreamOpen = false) Parameters Type Name Description Stream stream Type type Int32 bufferSize Boolean leaveStreamOpen Returns Type Description Object | Improve this Doc View Source Deserialize(String) Declaration public dynamic Deserialize(string json) Parameters Type Name Description String json Returns Type Description Object | Improve this Doc View Source Deserialize(String, Type) Declaration public object Deserialize(string json, Type type) Parameters Type Name Description String json Type type Returns Type Description Object | Improve this Doc View Source Deserialize<T>(Stream, Int32, Boolean) Declaration public T Deserialize<T>(Stream stream, int bufferSize = 1024, bool leaveStreamOpen = false) where T : class Parameters Type Name Description Stream stream Int32 bufferSize Boolean leaveStreamOpen Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Deserialize<T>(String) Declaration public T Deserialize<T>(string json) where T : class Parameters Type Name Description String json Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source DeserializeToList(Stream, Int32, Boolean) Declaration public List<dynamic> DeserializeToList(Stream stream, int bufferSize = 1024, bool leaveStreamOpen = false) Parameters Type Name Description Stream stream Int32 bufferSize Boolean leaveStreamOpen Returns Type Description List < Object > | Improve this Doc View Source DeserializeToList(Stream, Type, Int32, Boolean) Declaration public List<object> DeserializeToList(Stream stream, Type type, int bufferSize = 1024, bool leaveStreamOpen = false) Parameters Type Name Description Stream stream Type type Int32 bufferSize Boolean leaveStreamOpen Returns Type Description List < Object > | Improve this Doc View Source DeserializeToList(String) Declaration public List<dynamic> DeserializeToList(string json) Parameters Type Name Description String json Returns Type Description List < Object > | Improve this Doc View Source DeserializeToList(String, Type) Declaration public List<object> DeserializeToList(string json, Type type) Parameters Type Name Description String json Type type Returns Type Description List < Object > | Improve this Doc View Source DeserializeToList<T>(Stream, Int32, Boolean) Declaration public List<T> DeserializeToList<T>(Stream stream, int bufferSize = 1024, bool leaveStreamOpen = false) where T : class Parameters Type Name Description Stream stream Int32 bufferSize Boolean leaveStreamOpen Returns Type Description List <T> Type Parameters Name Description T | Improve this Doc View Source DeserializeToList<T>(String) Declaration public List<T> DeserializeToList<T>(string json) where T : class Parameters Type Name Description String json Returns Type Description List <T> Type Parameters Name Description T | Improve this Doc View Source SerializeListToStream<T>(IEnumerable<T>, Int32) Declaration public Stream SerializeListToStream<T>(IEnumerable<T> objects, int bufferSize = 1024) where T : class Parameters Type Name Description IEnumerable <T> objects Int32 bufferSize Returns Type Description Stream Type Parameters Name Description T | Improve this Doc View Source SerializeListToStream<T>(IEnumerable<T>, Stream, Int32, Boolean) Declaration public void SerializeListToStream<T>(IEnumerable<T> objects, Stream stream, int bufferSize = 1024, bool leaveStreamOpen = false) where T : class Parameters Type Name Description IEnumerable <T> objects Stream stream Int32 bufferSize Boolean leaveStreamOpen Type Parameters Name Description T | Improve this Doc View Source SerializeListToString<T>(IEnumerable<T>) Declaration public string SerializeListToString<T>(IEnumerable<T> obj) where T : class Parameters Type Name Description IEnumerable <T> obj Returns Type Description String Type Parameters Name Description T | Improve this Doc View Source SerializeToStream(Object, Type, Int32) Declaration public Stream SerializeToStream(object obj, Type type, int bufferSize = 1024) Parameters Type Name Description Object obj Type type Int32 bufferSize Returns Type Description Stream | Improve this Doc View Source SerializeToStream(Object, Type, Stream, Int32, Boolean) Declaration public void SerializeToStream(object obj, Type type, Stream stream, int bufferSize = 1024, bool leaveStreamOpen = false) Parameters Type Name Description Object obj Type type Stream stream Int32 bufferSize Boolean leaveStreamOpen | Improve this Doc View Source SerializeToStream<T>(T, Int32) Declaration public Stream SerializeToStream<T>(T obj, int bufferSize = 1024) where T : class Parameters Type Name Description T obj Int32 bufferSize Returns Type Description Stream Type Parameters Name Description T | Improve this Doc View Source SerializeToStream<T>(T, Stream, Int32, Boolean) Declaration public void SerializeToStream<T>(T obj, Stream stream, int bufferSize = 1024, bool leaveStreamOpen = false) where T : class Parameters Type Name Description T obj Stream stream Int32 bufferSize Boolean leaveStreamOpen Type Parameters Name Description T | Improve this Doc View Source SerializeToString(Object) Declaration public string SerializeToString(object obj) Parameters Type Name Description Object obj Returns Type Description String | Improve this Doc View Source SerializeToString<T>(T) Declaration public string SerializeToString<T>(T obj) where T : class Parameters Type Name Description T obj Returns Type Description String Type Parameters Name Description T | Improve this Doc View Source SerializeToXml(String) Declaration public string SerializeToXml(string json) Parameters Type Name Description String json Returns Type Description String Implements DotNetHelper.Serialization.Abstractions.Interface.ISerializer"
  },
  "api/DotNetHelper.Serialization.Json.html": {
    "href": "api/DotNetHelper.Serialization.Json.html",
    "title": "Namespace DotNetHelper.Serialization.Json | DotNetHelper.Serialization.Json",
    "keywords": "Namespace DotNetHelper.Serialization.Json Classes DataSourceJson"
  },
  "index.html": {
    "href": "index.html",
    "title": "DotNetHelper.Serialization.Json | DotNetHelper.Serialization.Json",
    "keywords": "DotNetHelper.Serialization.Json DotNetHelper.Serialization.Json is a lightweight serialization library for json. Package Tests Code Coverage How to use var jsonSerializer = new DataSourceJson(); Now you have access to all the Apis you will ever need for a json serializer check them out //Serialize an object to the provided stream void SerializeToStream<T>(T obj, Stream stream, int bufferSize = 1024, bool leaveStreamOpen = false) where T : class; void SerializeToStream(object obj, Type type, Stream stream, int bufferSize = 1024, bool leaveStreamOpen = false); //Serialize an object to a new instance of a stream and returns the stream Stream SerializeToStream<T>(T obj, int bufferSize = 1024) where T : class; Stream SerializeToStream(object obj, Type type, int bufferSize = 1024); //Serialize an object to a string string SerializeToString(object obj); string SerializeToString<T>(T obj) where T : class; //Retrieve a list of either generics,objects,or dynamics from either a stream or string List<dynamic> DeserializeToList(string content); List<dynamic> DeserializeToList(Stream stream, int bufferSize = 1024, bool leaveStreamOpen = false); List<T> DeserializeToList<T>(string content) where T : class; List<T> DeserializeToList<T>(Stream stream, int bufferSize = 1024, bool leaveStreamOpen = false) where T : class; List<object> DeserializeToList(string content, Type type); //Retrieve a dynamic object from String or stream dynamic Deserialize(string content); dynamic Deserialize(Stream stream, int bufferSize = 1024, bool leaveStreamOpen = false); //Retrieve a strongly type from a string or stream T Deserialize<T>(string content) where T : class; T Deserialize<T>(Stream stream, int bufferSize = 1024, bool leaveStreamOpen = false) where T : class; //Retrieve a object from a string or stream object Deserialize(string content, Type type); object Deserialize(Stream stream, Type type, int bufferSize = 1024, bool leaveStreamOpen = false); Serialization with Files This example is going to reference a employee class and two global variables public class Employee { public string FirstName { get; set; } = \"Jon\"; public string LastName { get; set; } = \"Last\"; public int Id { get; set; } } var jsonSerializer = new DataSourceJson(); var employee = new Employee {Id = 1}; Write single object to file using (var fileStream = new FileStream($@\"C:\\Temp\\employee.csv\", FileMode.Create, FileAccess.Write)) jsonSerializer.SerializeToStream(employee, fileStream); Write list of objects to file using (var fileStream = new FileStream($@\"C:\\Temp\\employeeList.csv\", FileMode.Create, FileAccess.Write)) jsonSerializer.SerializeListToStream(new List<Employee>(){employee}, fileStream); Read single object from file var employeeFromFile = jsonSerializer.Deserialize<Employee>(new StreamReader($@\"C:\\Temp\\employee.csv\").BaseStream); Read list of objects from file var employeesFromFile = jsonSerializer.DeserializeToList<Employee>(new StreamReader($@\"C:\\Temp\\employeeList.csv\").BaseStream); <!-- Links. -->"
  }
}